# VisDrone to custom format (car, tree, building, person, other)
# Save this as VisDrone_custom.yaml

path: VisDrone  # dataset root dir
train: images/train
val: images/val
test: images/test

# Custom target classes
names:
  0: car
  1: tree
  2: building
  3: person
  4: other

download: |
  import os
  from pathlib import Path
  import shutil
  from PIL import Image
  from ultralytics.utils.downloads import download
  from ultralytics.utils import ASSETS_URL, TQDM

  # === Step 1: Download original VisDrone dataset ===
  dir = Path(yaml["path"])
  urls = [
      f"{ASSETS_URL}/VisDrone2019-DET-train.zip",
      f"{ASSETS_URL}/VisDrone2019-DET-val.zip",
      f"{ASSETS_URL}/VisDrone2019-DET-test-dev.zip",
  ]
  download(urls, dir=dir, threads=4)

  # === Step 2: Convert VisDrone annotations to YOLO format ===
  def visdrone2yolo(dir, split, source_name=None):
      source_dir = dir / (source_name or f"VisDrone2019-DET-{split}")
      images_dir = dir / "images" / split
      labels_dir = dir / "labels" / split
      labels_dir.mkdir(parents=True, exist_ok=True)

      if (source_images_dir := source_dir / "images").exists():
          images_dir.mkdir(parents=True, exist_ok=True)
          for img in source_images_dir.glob("*.jpg"):
              img.rename(images_dir / img.name)

      for f in TQDM((source_dir / "annotations").glob("*.txt"), desc=f"Converting {split}"):
          img_size = Image.open(images_dir / f.with_suffix(".jpg").name).size
          dw, dh = 1.0 / img_size[0], 1.0 / img_size[1]
          lines = []

          with open(f, encoding="utf-8") as file:
              for row in [x.split(",") for x in file.read().strip().splitlines()]:
                  if row[4] != "0":  # ignore regions
                      x, y, w, h = map(int, row[:4])
                      cls = int(row[5]) - 1
                      # YOLO normalized format
                      x_center, y_center = (x + w / 2) * dw, (y + h / 2) * dh
                      w_norm, h_norm = w * dw, h * dh
                      lines.append(f"{cls} {x_center:.6f} {y_center:.6f} {w_norm:.6f} {h_norm:.6f}\n")

          (labels_dir / f.name).write_text("".join(lines), encoding="utf-8")

  splits = {
      "VisDrone2019-DET-train": "train",
      "VisDrone2019-DET-val": "val",
      "VisDrone2019-DET-test-dev": "test",
  }
  for folder, split in splits.items():
      visdrone2yolo(dir, split, folder)
      shutil.rmtree(dir / folder)

  # === Step 3: Remap classes to your custom format ===
  label_map = {
      0: 3,  # pedestrian -> person
      1: 3,  # people -> person
      2: 4,  # bicycle -> other
      3: 0,  # car -> car
      4: 0,  # van -> car
      5: 0,  # truck -> car
      6: 4,  # tricycle -> other
      7: 4,  # awning-tricycle -> other
      8: 0,  # bus -> car
      9: 4,  # motor -> other
  }

  def remap_labels(label_dir):
      for split in ["train", "val", "test"]:
          folder = Path(label_dir) / split
          for file in folder.glob("*.txt"):
              new_lines = []
              with open(file, "r") as f:
                  for line in f:
                      parts = line.strip().split()
                      if not parts:
                          continue
                      old_cls = int(parts[0])
                      if old_cls not in label_map:
                          continue
                      parts[0] = str(label_map[old_cls])
                      new_lines.append(" ".join(parts) + "\n")
              with open(file, "w") as f:
                  f.writelines(new_lines)

  remap_labels(dir / "labels")
  print("Dataset successfully converted to custom format (car, tree, building, person, other)")
